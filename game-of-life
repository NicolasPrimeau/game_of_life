#!/usr/bin/env python

import time
from random import randint
import copy
import subprocess
import sys

time_delay = 1
max_turns = -1
species = []

sys.argv.pop(0)

i=1
while i<len(sys.argv):
  arg = sys.argv.pop(0)
  if arg == "-s" and 0<len(sys.argv):
    species = sys.argv.pop(0).split(",")
    species = filter(None, species)
  elif arg == "-t" and 0<len(sys.argv):
    time_delay = sys.argv.pop(0)
  elif arg == "-m" and 0<len(sys.argv):
    max_turns = sys.argv.pop(0)
  elif arg == "-x" and 0 <len(sys.argv):
    x = sys.argv.pop(0)
  elif arg == "-y" and 0 <len(sys.argv):
    y = sys.argv.pop(0)
  elif arg == "-n" and 0 <len(sys.argv):
    spawns = sys.argv.pop(0)
  elif arg == "help":
    print("------------------------------")
    print("Classic game of life!")
    print("------------------------------")
    print("An implementation of the old game of life program")
    print("\nArguments:")
    print("\n[-s] (symbol(s))")
    print("A list of symbols seperated by a comma, one for each species you want.")
    print("Will default to one species, 0, if none given")
    print("\n[-t] (time)")
    print("The time delay between turns, default is 1 second")
    print("\n[-m] (turns)")
    print("Max turns, default is unlimited")
    print("\n[-x] (width)")
    print("Width of the map, default is 100")
    print("\n[-y] (height), default is 20")
    print("Height of the map")
    print("\n[-n] (number)")
    print("Number of spawns total, default is 200")
    sys.exit()
  else:
    print("Argument not recognized, or missing info. Type help for more info")
    sys.exit()

if(species == []):
  species = ["0"]

try:
  spawns = int(spawns)
except:
  print("Spawns given is wrong, defaulting to 200")
  spawns = 200

try:
  max_turns = int(max_turns)
except:
  print("Max turns given is wrong, defaulting to unlimited")
  max_turns = -1

try:
  time_delay = int(time_delay)
except:
  print("Time delay given is wrong, defaulting to one second")
  time_delay = 1

try:
  x = int(x)
except:
  x = 100
  print("X given is wrong, defaulting to 100")

try:
  y = int(y)
except:
  y = 20
  print("Y given is wrong, defaulting to 20")


def time_limit(n):
  return n >  max_turns and max_turns !=-1

class Board:
  board_length_y = 20
  board_length_x = 100
  number_of_spawns = 200
  types = []
  cell_symbol = ["0"]
  dead_symbol = " "
  board = []

  def __init__(self,y=20,x=100,spawns=200,cell_symbol=["0"]):
    self.board_length_y = y
    self.board_length_x = x
    self.number_of_spawns = spawns
    self.cell_symbol = cell_symbol
    self.types = [0 for i in range(len(self.cell_symbol))]
    self.new_board()

  def new_board(self):
    
    self.board = [[self.dead_symbol for i in range(self.board_length_x+2)] for j in range(self.board_length_y+2)]
    for i in range(len(self.board)):
      self.board[i][0] = "|"
      self.board[i][self.board_length_x+1] = "|"
      i +=1

    for i in range(len(self.board[0])):
      self.board[0][i] = "-"
      self.board[self.board_length_y+1][i] = "-"
      i+=1
    self.board[0][0] = "+"
    self.board[0][self.board_length_x+1] = "+"
    self.board[self.board_length_y+1][0] = "+"
    self.board[self.board_length_y+1][self.board_length_x+1] = "+"

  def print_board(self):
    for line in self.board:
      print "".join(line)
 
  def start(self):
    for i in range(self.number_of_spawns):
      x = randint(1,self.board_length_x-1)
      y = randint(1,self.board_length_y-1)
      type = randint(0,len(self.types)-1)
      if(self.board[y][x] == self.dead_symbol):
        self.board[y][x] = self.cell_symbol[type]
        self.types[type] +=1

  def update(self):
    tempboard = copy.deepcopy(self.board)
    self.new_board()
    for y in range(1,self.board_length_y):
      for x in range(1, self.board_length_x):
        isAlive = tempboard[y][x] in self.cell_symbol
        neighbours = []

        for i in range (len(self.types)):
          neighbours.append(self.count_neighbours(y,x,i,tempboard))   
        if(isAlive):
          ntype = self.cell_symbol.index(tempboard[y][x])
       
        #Which type wins?
        max = 0
        type = 0
        for i in range(len(neighbours)):
          if(neighbours[i] > max):
            max = neighbours[i]
            type = i

        if isAlive:
          if max > neighbours[ntype] and max >1 and max <4:
            self.board[y][x] = self.cell_symbol[type]
            self.types[ntype] -= 1
            self.types[type] +=1
          elif(neighbours[ntype] < 2):
            self.board[y][x] = self.dead_symbol
            self.types[ntype] -= 1
          elif(neighbours[ntype] > 3):
            self.board[y][x] = self.dead_symbol
            self.types[ntype] -= 1
          else:
            self.board[y][x] = self.cell_symbol[ntype]
        else:
          if(max>2):
            self.board[y][x] = self.cell_symbol[type]
            self.types[type] += 1
  
  def count_neighbours(self,y,x,type,tempboard):
    neighbours = 0
    if(tempboard[y-1][x] == self.cell_symbol[type]):
      neighbours+=1
    if(tempboard[y+1][x] == self.cell_symbol[type]):
      neighbours+=1
    if(tempboard[y][x-1] == self.cell_symbol[type]):
      neighbours+=1
    if(tempboard[y][x+1] == self.cell_symbol[type]):
      neighbours+=1
    if(tempboard[y-1][x-1] == self.cell_symbol[type]):
      neighbours +=1
    if(tempboard[y-1][x+1] == self.cell_symbol[type]):
      neighbours +=1
    if(tempboard[y+1][x-1] == self.cell_symbol[type]):
      neighbours += 1
    if(tempboard[y+1][x+1] == self.cell_symbol[type]):
      neighbours += 1
    return neighbours

  def extinction(self):
    temp = copy.deepcopy(self.board)
    self.new_board()
    extinct = temp == self.board
    self.board = copy.deepcopy(temp)
    return extinct

x = Board(y,x,spawns,species)
x.start()
c_turn = 0

while(not x.extinction() and not time_limit(c_turn)):
  process = subprocess.Popen("clear",shell=True)
  process.wait()
  x.print_board()
  print("Epoch: "+str(c_turn))
  for i in range (len(x.types)):
    print("Number of type "+x.cell_symbol[i]+" alive: "+str(x.types[i]))
  x.update()
  time.sleep(time_delay)
  c_turn +=1
else:
  print("Extinction\n")
